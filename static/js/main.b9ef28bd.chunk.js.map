{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","utils/fetchClient.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","selectedPostId","setSelectedPost","className","map","post","isSelected","id","title","body","type","classNames","onClick","Loader","initialValue","name","email","initialError","NewCommentForm","postId","addComment","useState","isLoading","setIsLoading","value","setValue","isError","setIsError","handleOnSubmit","event","a","preventDefault","current","Error","handleChange","target","fieldValue","fieldName","onSubmit","htmlFor","placeholder","onChange","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","client","getPosts","userId","PostDetails","selectedPost","comments","setComments","isActive","setIsActive","removeComment","commentId","deleteComment","filter","comment","newComment","postedCommentToServer","prevComments","length","href","UserSelector","users","selectedUser","setSelectedUser","isOpen","setIsOpen","role","user","App","setUsers","setPosts","useEffect","loadUsers","loadedUsers","loadPosts","loadedPosts","loadComments","loadedComments","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b9ef28bd.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  selectedPostId: number | undefined,\n  setSelectedPost: (post: Post | null) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts, selectedPostId = 0, setSelectedPost,\n}) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => {\n            const isSelected = post.id === selectedPostId;\n\n            return (\n              <tr data-cy=\"Post\" key={post.id}>\n                <td data-cy=\"PostId\">{post.title}</td>\n\n                <td data-cy=\"PostTitle\">\n                  {post.body}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={classNames(\n                      'button is-link',\n                      { 'is-light': !isSelected },\n                    )}\n                    onClick={() => setSelectedPost(!isSelected\n                      ? post\n                      : null)}\n                  >\n                    {!isSelected ? 'Open' : 'Close'}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  postId: number,\n  addComment: (\n    name: string,\n    email: string,\n    body: string,\n    postId: number\n  ) => Promise<void>\n};\n\nconst initialValue = {\n  name: '',\n  email: '',\n  body: '',\n};\n\nconst initialError = {\n  name: false,\n  email: false,\n  body: false,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId, addComment,\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [value, setValue] = useState(initialValue);\n  const [isError, setIsError] = useState(initialError);\n\n  const handleOnSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    try {\n      if (!value.name || !value.email || !value.body) {\n        setIsError({\n          name: !value.name,\n          email: !value.email,\n          body: !value.body,\n        });\n      } else {\n        setIsLoading(true);\n        await addComment(value.name,\n          value.email,\n          value.body,\n          postId);\n        setValue(current => ({ ...current, body: '' }));\n      }\n    } catch (error) {\n      throw new Error('Unable to submit form');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const clearComment = () => {\n    setIsError(initialError);\n    setValue(initialValue);\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement\n  | HTMLTextAreaElement>) => {\n    setIsError(initialError);\n\n    setValue(current => {\n      const { value: fieldValue, name: fieldName } = event.target;\n\n      return {\n        ...current,\n        [fieldName]: fieldValue,\n      };\n    });\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleOnSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': isError.name },\n            )}\n            value={value.name}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isError.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isError.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': isError.email },\n            )}\n            value={value.email}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isError.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isError.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': isError.email },\n            )}\n            value={value.body}\n            onChange={handleChange}\n          />\n        </div>\n\n        {isError.body && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              { 'is-loading': isLoading },\n            )}\n            onClick={() => addComment}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={clearComment}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { Comment } from '../types/Comment';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const postComment = (comment: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', comment);\n};\n","import React, { useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { deleteComment, postComment } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  selectedPost: Post,\n  comments: Comment[],\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>\n  isLoading: boolean,\n  isError: boolean,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost, comments, setComments, isLoading, isError,\n}) => {\n  const [isActive, setIsActive] = useState(false);\n\n  const removeComment = (commentId: number) => {\n    deleteComment(commentId);\n    setComments(comments.filter(comment => comment.id !== commentId));\n  };\n\n  const addComment = async (\n    name: string, email: string, body: string, postId: number,\n  ) => {\n    const newComment = {\n      postId,\n      name,\n      email,\n      body,\n    };\n\n    try {\n      const postedCommentToServer = await postComment(newComment);\n\n      setComments(prevComments => [...prevComments, postedCommentToServer]);\n    } catch (error) {\n      throw new Error('Unable to create new comment');\n    }\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      {selectedPost && (\n        <div className=\"content\" data-cy=\"PostDetails\">\n          <div className=\"block\">\n            <h2 data-cy=\"PostTitle\">\n              {`${selectedPost.id}: ${selectedPost.title}`}\n            </h2>\n\n            <p data-cy=\"PostBody\">\n              {selectedPost.body}\n            </p>\n          </div>\n\n          <div className=\"block\">\n            {isLoading && <Loader />}\n\n            {isError && (\n              <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                Something went wrong\n              </div>\n            )}\n\n            {!isLoading && !isError && comments.length === 0 && (\n              <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                No comments yet\n              </p>\n            )}\n\n            {!!comments.length && (\n              <p className=\"title is-4\">Comments:</p>\n            )}\n\n            {comments.map(comment => (\n              <article\n                className=\"message is-small\"\n                data-cy=\"Comment\"\n                key={comment.id}\n              >\n\n                <div className=\"message-header\">\n                  <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                    {comment.name}\n                  </a>\n                  <button\n                    data-cy=\"CommentDelete\"\n                    type=\"button\"\n                    className=\"delete is-small\"\n                    aria-label=\"delete\"\n                    onClick={() => removeComment(comment.id)}\n                  >\n                    Delete button\n                  </button>\n                </div>\n\n                <div className=\"message-body\" data-cy=\"CommentBody\">\n                  {comment.body}\n                </div>\n              </article>\n            ))}\n\n            {(!isActive && !isError && !isLoading) && (\n              <button\n                data-cy=\"WriteCommentButton\"\n                type=\"button\"\n                className=\"button is-link\"\n                onClick={() => setIsActive(true)}\n              >\n                Write a comment\n              </button>\n            )}\n          </div>\n\n          {isActive && (\n            <NewCommentForm\n              postId={selectedPost.id}\n              addComment={addComment}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[],\n  selectedUser: User | null,\n  setSelectedUser: (user: User) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users, selectedUser, setSelectedUser,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        { 'is-active': isOpen },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsOpen(current => !current)}\n        >\n          <span>{selectedUser ? selectedUser.name : 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={classNames(\n                'dropdown-item',\n                { 'is-active': user.id === selectedUser?.id },\n              )}\n              onClick={() => {\n                setSelectedUser(user);\n                setIsOpen(false);\n              }}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\n\nimport { getComments, getPosts, getUsers } from './utils/fetchClient';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const loadUsers = async () => {\n      try {\n        const loadedUsers = await getUsers();\n\n        setUsers(loadedUsers);\n      } catch (error) {\n        setIsError(true);\n      }\n    };\n\n    loadUsers();\n  }, []);\n\n  const loadPosts = async (userId: number) => {\n    try {\n      setIsLoading(true);\n      const loadedPosts = await getPosts(userId);\n\n      setPosts(loadedPosts);\n    } catch (error) {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    const loadComments = async () => {\n      if (!selectedPost) {\n        return;\n      }\n\n      try {\n        const loadedComments = await getComments(selectedPost.id);\n\n        setComments(loadedComments);\n      } catch (error) {\n        setIsError(true);\n      }\n    };\n\n    loadComments();\n  }, [selectedPost]);\n\n  useEffect(() => {\n    setSelectedPost(null);\n\n    if (selectedUser) {\n      loadPosts(selectedUser.id);\n    } else {\n      setPosts([]);\n    }\n  }, [selectedUser?.id]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {selectedUser && isLoading && <Loader />}\n\n                {selectedUser && isError && isLoading && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {selectedUser && posts.length === 0 && !isError && !isLoading\n                  && (\n                    <div\n                      className=\"notification is-warning\"\n                      data-cy=\"NoPostsYet\"\n                    >\n                      No posts yet\n                    </div>\n                  )}\n\n                {selectedUser && posts.length > 0 && !isError && !isLoading && (\n                  <PostsList\n                    posts={posts}\n                    setSelectedPost={setSelectedPost}\n                    selectedPostId={selectedPost?.id}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            {selectedPost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  selectedPost={selectedPost}\n                  comments={comments}\n                  setComments={setComments}\n                  isLoading={isLoading}\n                  isError={isError}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}